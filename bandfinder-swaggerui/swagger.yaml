---
swagger: "2.0"
info:
  description: The BandMeetUp REST API provides operations for creating, viewing, and modifying accounts and information.
  version: 1.0.0
  title: BandMeetUp API Reference
  contact:
    name: Bernard Hromek
    url: http://hromek.github.io/writing-samples/
    email: bhromek1@verizon.net
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
host: virtserver.swaggerhub.com
basePath: /hromek/BandFinder/1.0.0
tags:
- name: Accounts
  description: Account operations
- name: Bands
  description: Band operations
- name: Musicians
  description: Musician operations
schemes:
- https
consumes:
- application/json
produces:
- application/json
paths:
  /accounts:
    get:
      tags:
      - Accounts
      summary: Get a list of all accounts.
      description: |
        Returns an array containing information for all accounts in the BandMeetUp system.
      parameters: []
      responses:
        200:
          description: OK.
          schema:
            type: array
            items:
              $ref: '#/definitions/Account'
          responseSchema:
            type: array
            items:
              $ref: '#/definitions/Account'
    post:
      tags:
      - Accounts
      summary: Create a new account
      description: Creates a new user account.
      parameters:
      - name: email
        in: query
        description: |
          The user's email address, which is also the account user name.
        required: true
        type: string
      responses:
        200:
          description: OK.
          schema:
            $ref: '#/definitions/Account'
          responseSchema:
            $ref: '#/definitions/Account'
  /accounts/{id}:
    get:
      tags:
      - Accounts
      summary: Get account information
      description: Gets information for a specific account.
      parameters:
      - name: id
        in: path
        description: A unique account identifier.
        required: true
        type: integer
      responses:
        200:
          description: OK.
          schema:
            $ref: '#/definitions/Account'
          responseSchema:
            $ref: '#/definitions/Account'
    put:
      tags:
      - Accounts
      summary: Update account information
      description: Updates account information. Note that the parameter *id* is ignored for this operation.
      parameters:
      - name: id
        in: path
        description: A unique account identifier.
        required: true
        type: integer
      - in: body
        name: account
        description: (tbd)
        required: true
        schema:
          $ref: '#/definitions/Account'
      responses:
        200:
          description: OK.
    delete:
      tags:
      - Accounts
      summary: Delete an account
      description: Deletes a specific account. Users can only delete their own accounts. When an account is deleted, the associated musician and bands are also deleted.
      parameters:
      - name: id
        in: path
        description: A unique account identifier.
        required: true
        type: integer
      responses:
        200:
          description: OK
  /accounts/{id}/password:
    put:
      tags:
      - Accounts
      summary: Change an account password.
      description: Changes the password for an account.
      parameters:
      - name: id
        in: path
        description: A unique account identifier.
        required: true
        type: integer
      - name: currentPassword
        in: query
        description: The user's current password.
        required: true
        type: string
      - name: newPassword
        in: query
        description: The user's new password.
        required: true
        type: string
      responses:
        200:
          description: OK.
  /band:
    get:
      tags:
      - Bands
      summary: Search for bands
      description: |
        Returns information for one or more bands based on the query parameters. You can specify zero or more parameters. If no parameters are specified, no records are returned.
      parameters:
      - name: name
        in: query
        description: The full, or partial, band name.
        required: false
        type: string
      - name: genre
        in: query
        description: A music genre. You can use a comma-separated list to specify mulple genres.
        required: false
        type: string
      - name: location
        in: query
        description: The city and state where the band is located. You can specify the city, the state, or both. Altenatively, you can specify a zip code.
        required: false
        type: string
      - name: instrumentsNeeded
        in: query
        description: "A comma-separated list of instruments needed by the band. \n"
        required: false
        type: array
        items:
          type: string
        collectionFormat: multi
      responses:
        200:
          description: Ok.
          schema:
            type: array
            items:
              $ref: '#/definitions/Band'
          responseSchema:
            type: array
            items:
              $ref: '#/definitions/Band'
    post:
      tags:
      - Bands
      summary: Create a new band
      description: |
        Creates a new band with the specified *bandName*.
      parameters:
      - name: bandName
        in: query
        description: The name of the band.
        required: true
        type: string
      responses:
        200:
          description: OK.
          schema:
            $ref: '#/definitions/Band'
          responseSchema:
            $ref: '#/definitions/Band'
  /bands/{id}:
    get:
      tags:
      - Bands
      summary: Get band information.
      description: Gets information for a specific band.
      parameters:
      - name: id
        in: path
        description: A unique band identifier.
        required: true
        type: integer
      responses:
        200:
          description: OK.
          schema:
            $ref: '#/definitions/Band'
          responseSchema:
            $ref: '#/definitions/Band'
    put:
      tags:
      - Bands
      summary: Update band information
      description: Updates information for a specific band.
      parameters:
      - name: id
        in: path
        description: A unique band identifier.
        required: true
        type: integer
      - in: body
        name: band
        description: The band information.
        required: true
        schema:
          $ref: '#/definitions/Band'
      responses:
        200:
          description: OK.
    delete:
      tags:
      - Bands
      summary: Delete a band.
      description: Deletes a specific band. Users can only delete bands associated with their accounts.
      parameters:
      - name: id
        in: path
        description: A unique band identifier.
        required: true
        type: integer
      responses:
        200:
          description: OK
  /musicians:
    get:
      tags:
      - Musicians
      summary: Search for musicians
      description: |
        Returns information for one or more musicians based on the query parameters. You can specify zero or more parameters. If no parameters are specified, no records are returned.
      parameters:
      - name: name
        in: query
        description: The full, or partial, musician name.
        required: false
        type: string
      - name: genre
        in: query
        description: |
          A music genre. You can use a comma-separated list to specify mulple genres.
        required: false
        type: string
      - name: location
        in: query
        description: |
          The city and state where the band is located. You can specify the city, the state, or both. Alternatively, you can specify a zip code.
        required: false
        type: string
      - name: instumentPlayed
        in: query
        description: |
          A comma-separated list of instruments that the musician plays.
        required: false
        type: string
      responses:
        200:
          description: OK.
          schema:
            type: array
            items:
              $ref: '#/definitions/Musician'
          responseSchema:
            type: array
            items:
              $ref: '#/definitions/Musician'
    post:
      tags:
      - Musicians
      summary: Create a musician
      description: Creates a new musician with the specified *musicianName*.
      parameters:
      - name: musicianName
        in: query
        description: The name of the musician.
        required: true
        type: string
      responses:
        200:
          description: OK.
          schema:
            $ref: '#/definitions/Musician'
          responseSchema:
            $ref: '#/definitions/Musician'
  /musicians/{id}:
    get:
      tags:
      - Musicians
      summary: Get musician information
      description: Returns information for a specific musician.
      parameters:
      - name: id
        in: path
        description: A unique musician name.
        required: true
        type: integer
      responses:
        200:
          description: OK.
    put:
      tags:
      - Musicians
      summary: Update musician information
      description: Updates information for a specific musician.
      parameters:
      - name: id
        in: path
        description: A unique musician identifier.
        required: true
        type: integer
      - in: body
        name: musician
        description: The information for the musician.
        required: true
        schema:
          $ref: '#/definitions/Musician'
      responses:
        200:
          description: OK.
    delete:
      tags:
      - Musicians
      summary: Delete a musician
      description: Deletes a specific musician. Users can only delete musicians associated with their accounts.
      parameters:
      - name: id
        in: path
        description: A unique musician identifier.
        required: true
        type: integer
      responses:
        200:
          description: OK
definitions:
  Account:
    required:
    - email
    - id
    properties:
      id:
        type: integer
        description: A unique account identifier.
      email:
        type: string
        description: Accounts use eEmail addresses for usernames.
    description: Represents the information associated with an account. Accounts exist independent of bands and musicians.
    example:
      id: 0
      email: email
  Band:
    required:
    - id
    - name
    properties:
      id:
        type: integer
        description: A unique band identifier.
      name:
        type: string
        description: The band name. The application does not require band names to be unique.
      genres:
        type: array
        description: Music genres performed by the band.
        items:
          type: string
      location:
        type: string
        description: The band's home city and state.
      instrumentsNeeded:
        type: array
        description: For bands seeking musician's, a list of one or more instruments needed.
        items:
          type: string
    description: Represents an individual band. A band is associated with a single account, but an account can be associated with multiple bands.
    example:
      instrumentsNeeded:
      - instrumentsNeeded
      - instrumentsNeeded
      genres:
      - genres
      - genres
      name: name
      location: location
      id: 0
  Musician:
    required:
    - id
    - name
    properties:
      id:
        type: integer
        description: A unique musician identifier.
      name:
        type: string
        description: The musician's name.
      genres:
        type: array
        description: Music genres in which the musician is interested.
        items:
          type: string
      location:
        type: string
        description: The musician's home city and state.
      instrumentsPlayed:
        type: array
        description: A list of instruments played by the musician.
        items:
          type: string
      vocals:
        type: boolean
        description: Indicates if the musician sings.
    description: Represents a single musician. A musician is associated with a single account and an account is associated with a single musician (a one-to-one relationship).
    example:
      instrumentsPlayed:
      - instrumentsPlayed
      - instrumentsPlayed
      genres:
      - genres
      - genres
      name: name
      vocals: true
      location: location
      id: 0
